group 'com.lcj.gradle.plugin'
version '1.0-SNAPSHOT'

apply plugin: 'scala'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.github.maiflai.scalatest'
apply plugin: 'com.gradle.plugin-publish'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.19"
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.10"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

install {
    repositories {
        mavenDeployer {
            repository(url: uri("${repoPath}"))
        }
    }
}

test {
    // Always run the tests
    outputs.upToDateWhen { false }

    maxParallelForks = 1

    // Turn on some console logging
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        stackTraceFilters "entryPoint"
    }
}

pluginBundle {
    website = 'https://plugins.gradle.org/u/lichangjiang'
    vcsUrl = 'https://github.com/lichangjiang/gScp'

    plugins {
        scpPlugin {
            id = 'com.lcj.gradle.plugin.upload'
            displayName = "gscp"
            description = 'Using scp to upload file'
            tags = ['scp','upload']
            version = '1.0-SNAPSHOT'
        }
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    testCompile gradleTestKit()
    extraLibs fileTree(include: ['*.jar'], dir: 'libs')
    compile 'org.scala-lang:scala-library:2.11.8'
    testCompile 'junit:junit:4.12'
    testCompile 'org.scalatest:scalatest_2.11:3.0.4'
    testRuntime 'org.scala-lang.modules:scala-xml_2.11:1.0.6'
    testCompile 'org.scalatest:scalatest_2.11:3.0.1'
    testRuntime 'org.pegdown:pegdown:1.4.2'
    testRuntime files(createClasspathManifest)
    configurations.compile.extendsFrom(configurations.extraLibs)
}

jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
